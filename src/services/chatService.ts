import { CVService } from './cvService';
import { ChatResponse } from '../types/chat';

export class ChatService {
  private cvService: CVService;
  private apiKey: string | null = null;

  constructor(cvRef: React.RefObject<HTMLElement>, apiKey?: string) {
    this.cvService = CVService.getInstance();
    
    // Priorit√© √† la cl√© API fournie en param√®tre
    if (apiKey) {
      this.apiKey = apiKey;
    } 
    // Sinon, essayer de r√©cup√©rer depuis localStorage
    else {
      const storedApiKey = localStorage.getItem('openai_api_key');
      if (storedApiKey) {
        this.apiKey = storedApiKey;
      }
      // En dernier recours, essayer de r√©cup√©rer depuis les variables d'environnement
      else if (process.env.OPENAI_API_KEY) {
        this.apiKey = process.env.OPENAI_API_KEY;
        // Stocker dans localStorage pour les utilisations futures
        localStorage.setItem('openai_api_key', this.apiKey);
      }
    }
  }

  /**
   * Traite une requ√™te utilisateur et retourne une r√©ponse
   */
  public async processQuery(query: string): Promise<ChatResponse> {
    try {
      // V√©rifier si le CV est charg√©
      if (!this.cvService.isCVLoaded()) {
        await this.cvService.loadCV();
      }

      // Si l'API key est disponible, utiliser OpenAI
      if (this.apiKey) {
        try {
          return await this.useOpenAI(query);
        } catch (openaiError) {
          console.error('OpenAI API error:', openaiError);
          // Fallback to local content if OpenAI fails
          return this.findRelevantContent(query);
        }
      }

      // Sinon, utiliser la m√©thode de recherche de contenu pertinent
      return this.findRelevantContent(query);
    } catch (error) {
      console.error('Error processing query:', error);
      return {
        response: "Je suis d√©sol√©, mais je rencontre des difficult√©s pour acc√©der √† mes informations. Pouvez-vous reformuler votre question ?",
        error: "Erreur de traitement",
        confidence: 0
      };
    }
  }

  /**
   * Utilise l'API OpenAI pour g√©n√©rer une r√©ponse
   */
  private async useOpenAI(query: string): Promise<ChatResponse> {
    if (!this.apiKey) {
      throw new Error('OpenAI API key is not available');
    }

    const cvContent = this.cvService.getCVContent();
    const cvText = JSON.stringify(cvContent, null, 2);

    const prompt = `
Tu es un assistant qui r√©pond aux questions sur le CV d'Asmaa. 
Voici le contenu du CV:
${cvText}

Question: ${query}

Instructions:
1. R√©ponds toujours en fran√ßais
2. Structure ta r√©ponse avec des emojis et du formatage Markdown
3. Utilise des titres en gras pour chaque section
4. Ajoute des d√©tails pertinents bas√©s sur le contenu du CV
5. Si tu ne trouves pas l'information dans le contenu, dis-le simplement
6. Pour les questions sur les comp√©tences, liste-les de mani√®re organis√©e par cat√©gorie
7. Pour les questions sur les projets, d√©cris-les bri√®vement avec les technologies utilis√©es
8. Termine toujours par une invitation √† poser d'autres questions

R√©ponds de mani√®re professionnelle et concise.`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            { 
              role: 'system', 
              content: 'Tu es un assistant professionnel qui aide √† r√©pondre aux questions sur le CV d\'Asmaa. Tu dois toujours r√©pondre en fran√ßais de mani√®re claire et structur√©e.' 
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.7,
          max_tokens: 800
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('OpenAI API error response:', errorData);
        throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0].message.content;

      return {
        response: aiResponse,
        error: null,
        confidence: 0.9
      };
    } catch (error) {
      console.error('Error calling OpenAI API:', error);
      throw error;
    }
  }

  /**
   * Trouve le contenu pertinent dans le CV en fonction de la requ√™te
   */
  private findRelevantContent(query: string): ChatResponse {
    try {
      const cvContent = this.cvService.getCVContent();
      const sections = cvContent.sections;
      const queryLower = query.toLowerCase();

      if (queryLower.includes("stage") || queryLower.includes("internship") || queryLower.includes("recherche")) {
        return this.formatInternshipResponse(sections.internship);
      }

      if (queryLower.includes("exp√©rience") || queryLower.includes("experience")) {
        return this.formatExperienceResponse(sections.experience);
      }

      if (queryLower.includes('comp√©tence') || queryLower.includes('skill') || queryLower.includes('technologie') || queryLower.includes('langage')) {
        return this.formatSkillsResponse(sections.skills);
      } else if (queryLower.includes('formation') || queryLower.includes('√©ducation') || queryLower.includes('dipl√¥me') || queryLower.includes('√©cole')) {
        return this.formatEducationResponse(sections.education);
      } else if (queryLower.includes('contact') || queryLower.includes('email') || queryLower.includes('t√©l√©phone') || queryLower.includes('adresse')) {
        return this.formatContactResponse(sections.contact);
      } else if (queryLower.includes('projet') || queryLower.includes('r√©alisations') || queryLower.includes('portfolio')) {
        return this.formatProjectsResponse(sections.projects);
      } else {
        // R√©ponse g√©n√©rique si aucune section sp√©cifique n'est demand√©e
        return {
          response: "Je peux vous fournir des informations sur mon exp√©rience, mes comp√©tences, ma formation, mes projets, ma recherche de stage ou mes coordonn√©es. Que souhaitez-vous savoir ?",
          error: null,
          confidence: 0.5
        };
      }
    } catch (error) {
      console.error('Error finding relevant content:', error);
      return {
        response: "Je suis d√©sol√©, mais je rencontre des difficult√©s pour acc√©der √† mes informations. Pouvez-vous reformuler votre question ?",
        error: "Erreur de recherche",
        confidence: 0
      };
    }
  }

  /**
   * Formate la r√©ponse pour la section exp√©rience
   */
  private formatExperienceResponse(experience: string): ChatResponse {
    if (!experience) {
      return {
        response: "Je n'ai pas encore ajout√© d'informations sur mon exp√©rience professionnelle.",
        error: null,
        confidence: 0.8
      };
    }

    return {
      response: `üìã **Exp√©rience professionnelle**\n\n${experience}\n\nSouhaitez-vous des d√©tails sur une exp√©rience particuli√®re ?`,
      error: null,
      confidence: 0.9
    };
  }

  /**
   * Formate la r√©ponse pour la section comp√©tences
   */
  private formatSkillsResponse(skills: string): ChatResponse {
    if (!skills) {
      return {
        response: "Je n'ai pas encore ajout√© d'informations sur mes comp√©tences.",
        error: null,
        confidence: 0.8
      };
    }

    return {
      response: `üõ†Ô∏è **Comp√©tences techniques**\n\n${skills}\n\nJe suis particuli√®rement int√©ress√© par l'intelligence artificielle et l'apprentissage automatique. Je suis autonome dans mon apprentissage et je m'efforce constamment d'am√©liorer mes comp√©tences dans ces domaines.\n\nSouhaitez-vous des d√©tails sur une comp√©tence particuli√®re ?`,
      error: null,
      confidence: 0.9
    };
  }

  /**
   * Formate la r√©ponse pour la section formation
   */
  private formatEducationResponse(education: string): ChatResponse {
    if (!education) {
      return {
        response: "Je n'ai pas encore ajout√© d'informations sur ma formation.",
        error: null,
        confidence: 0.8
      };
    }

    return {
      response: `üéì **Formation**\n\n${education}\n\nSouhaitez-vous des d√©tails sur une formation particuli√®re ?`,
      error: null,
      confidence: 0.9
    };
  }

  /**
   * Formate la r√©ponse pour la section contact
   */
  private formatContactResponse(contact: string): ChatResponse {
    if (!contact) {
      return {
        response: "Je n'ai pas encore ajout√© d'informations de contact.",
        error: null,
        confidence: 0.8
      };
    }

    return {
      response: `üìß **Coordonn√©es**\n\n${contact}\n\nN'h√©sitez pas √† me contacter pour toute opportunit√© de collaboration ou de stage.`,
      error: null,
      confidence: 0.9
    };
  }

  /**
   * Formate la r√©ponse pour la section projets
   */
  private formatProjectsResponse(projects: string): ChatResponse {
    if (!projects) {
      return {
        response: "Je n'ai pas encore ajout√© d'informations sur mes projets.",
        error: null,
        confidence: 0.8
      };
    }

    return {
      response: `üöÄ **Projets**\n\n${projects}\n\nSouhaitez-vous des d√©tails sur un projet particulier ?`,
      error: null,
      confidence: 0.9
    };
  }

  /**
   * Formate la r√©ponse pour la recherche de stage
   */
  private formatInternshipResponse(internship: string): ChatResponse {
    if (!internship) {
      return {
        response: "Je n'ai pas encore ajout√© d'informations sur ma recherche de stage.",
        error: null,
        confidence: 0.8
      };
    }

    return {
      response: `üéØ **Recherche de stage**\n\n${internship}\n\nSouhaitez-vous des d√©tails sur ma recherche de stage ?`,
      error: null,
      confidence: 0.9
    };
  }
} 